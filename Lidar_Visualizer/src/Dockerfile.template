# base-image for python on any machine using a template variable,
# see more about dockerfile templates here: https://www.balena.io/docs/learn/develop/dockerfile/
# FROM balenalib/%%BALENA_MACHINE_NAME%%-python:3-stretch-run
FROM balenalib/%%BALENA_MACHINE_NAME%%-debian-node:10-stretch-run

# use `install_packages` if you need to install dependencies,
# for instance if you need git, just uncomment the line below.
# RUN install_packages git

# Set our working directory
WORKDIR /usr/src/app

# Copy requirements.txt first for better cache on later pushes
COPY requirements.txt requirements.txt

# Install pip
RUN apt-get update && \
    apt-get install -yq \
    python3 \
    python3-dev \
    python3-pip 
RUN pip3 install --upgrade pip

# pip install python deps from requirements.txt on the resin.io build server
RUN pip install -r requirements.txt

# CMD sudo apt install curl

# CMD curl -X GET --header "Content-Type:application/json" "$BALENA_SUPERVISOR_ADDRESS/v1/device?apikey=$BALENA_SUPERVISOR_API_KEY"

# ENV now=CMD curl -X GET --header "Content-Type:application/json" \
#     "$BALENA_SUPERVISOR_ADDRESS/v1/device?apikey=$BALENA_SUPERVISOR_API_KEY"

# CMD echo now

# CMD echo TEXTVAR

# This will copy all files in our root to the working  directory in the container
COPY ./app .

# Enable udevd so that plugged dynamic hardware devices show up in our container.
ENV UDEV=1

# main.py will run when container starts up on the device
CMD ["python3", "-u", "./main.py"]
# CMD [ "sleep", "infinity" ]
